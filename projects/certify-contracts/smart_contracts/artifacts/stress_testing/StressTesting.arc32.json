{
    "hints": {
        "create(address,address,uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key_reg_info": {
                    "name": "KeyRegTxnInfo",
                    "elements": [
                        [
                            "vote_first",
                            "uint64"
                        ],
                        [
                            "vote_last",
                            "uint64"
                        ],
                        [
                            "vote_key_dilution",
                            "uint64"
                        ],
                        [
                            "vote_pk",
                            "byte[32]"
                        ],
                        [
                            "selection_pk",
                            "byte[32]"
                        ],
                        [
                            "state_proof_pk",
                            "byte[64]"
                        ],
                        [
                            "sender",
                            "address"
                        ]
                    ]
                }
            }
        },
        "end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)": {
            "call_config": {
                "delete_application": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ReturnStressTestingEnd",
                    "elements": [
                        [
                            "success",
                            "bool"
                        ],
                        [
                            "avr_online_stake",
                            "uint64"
                        ],
                        [
                            "cnt_produced_block",
                            "uint64"
                        ],
                        [
                            "round_start",
                            "uint64"
                        ],
                        [
                            "round_end",
                            "uint64"
                        ],
                        [
                            "round_ended",
                            "uint64"
                        ],
                        [
                            "stake",
                            "uint64"
                        ],
                        [
                            "user_address",
                            "address"
                        ]
                    ]
                }
            }
        },
        "record()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "unused()uint64": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc3RyZXNzX3Rlc3RpbmcuY29udHJhY3QuU3RyZXNzVGVzdGluZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 12
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "cnt_produced_blocks": {
                    "type": "uint64",
                    "key": "cnt_produced_blocks"
                },
                "cnt_total_stake_sum": {
                    "type": "uint64",
                    "key": "cnt_total_stake_sum"
                },
                "duration": {
                    "type": "uint64",
                    "key": "duration"
                },
                "duration_max": {
                    "type": "uint64",
                    "key": "duration_max"
                },
                "last_block": {
                    "type": "uint64",
                    "key": "last_block"
                },
                "owner_address": {
                    "type": "bytes",
                    "key": "owner_address"
                },
                "round_created": {
                    "type": "uint64",
                    "key": "round_created"
                },
                "round_end": {
                    "type": "uint64",
                    "key": "round_end"
                },
                "round_end_max": {
                    "type": "uint64",
                    "key": "round_end_max"
                },
                "round_ended": {
                    "type": "uint64",
                    "key": "round_ended"
                },
                "round_start": {
                    "type": "uint64",
                    "key": "round_start"
                },
                "stake": {
                    "type": "uint64",
                    "key": "stake"
                },
                "state": {
                    "type": "bytes",
                    "key": "state"
                },
                "total_stake_sum": {
                    "type": "uint64",
                    "key": "total_stake_sum"
                },
                "user_address": {
                    "type": "bytes",
                    "key": "user_address"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StressTesting",
        "desc": "\n    Escrow to be put online for the stress test by the user.\n    It allows counting of produced blocks.\n\n    Global state\n    ------------\n\n    user_address : arc4.Address\n        Account of user that requested the test.\n    owner_address : arc4.Address\n        Account of owner of the funds used in the stress test.\n\n    stake : UInt64\n        Amount of stake used in the stress test.\n        The value is expressed in microALGO.\n\n    duration : UInt64\n        Number of rounds for the stress test.\n        The actual duration of the block recording is 320 rounds shorter due to consensus trailing.\n    duration_max : UInt64\n        Maximum number of rounds allocated for the test, i.e. blocking of funds.\n        This is to take into account key generation time after the stress testing contract has been created.\n    round_created : UInt64\n        Round number when the request for the stress test is created.\n    round_start : UInt64\n        Round number when the actual participation in consensus starts.\n    round_end : UInt64\n        Round number when test should end.\n    round_ended : UInt64\n        Round number at which the contract ended.\n        Can be smaller than round_end in case of early test termination.\n    round_end_max : UInt64\n        Round number by which the stress test will be completed at the latest.\n\n    last_block : UInt64\n        Last block number that this contract account produced.\n    cnt_produced_blocks : UInt64\n        Counter of produced blocks.\n\n    total_stake_sum : UInt64\n        Sum for calculating the average of total online stake during the test.\n    cnt_total_stake_sum : UInt64\n        Counter for calculating the average of total online stake during the test.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            CREATED - contract has been created.\n            LIVE - contract is live.\n\n    Methods\n    -------\n    create(\n        user_address: arc4.Address,\n        owner_address: arc4.Address,\n        stake: UInt64,\n        duration: UInt64,\n        round_end_max: UInt64,\n    ) -> arc4.UInt64:\n        Creates a new contract for stress testing.\n\n    start(\n        user_address: arc4.Address,\n        key_reg_info: KeyRegTxnInfo,\n        txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Starts the stress test.\n\n    end(\n        user_address: arc4.Address,\n    ) -> ReturnStressTestingEnd:\n        Ends the stress test.\n\n    record(\n    ) -> None:\n        Records a produced block during the stress test.\n\n    unused(\n    ) -> None:\n        Records a produced block during the stress test.\n\n\n    ",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address",
                        "desc": "Account of user that requested the test."
                    },
                    {
                        "type": "address",
                        "name": "owner_address",
                        "desc": "Account of owner of the funds used in the stress test."
                    },
                    {
                        "type": "uint64",
                        "name": "stake",
                        "desc": "Amount of stake used in the stress test. The value is expressed in microALGO."
                    },
                    {
                        "type": "uint64",
                        "name": "duration",
                        "desc": "Number of rounds for the stress test. The actual duration of the block recording is 320 rounds shorter due to consensus trailing."
                    },
                    {
                        "type": "uint64",
                        "name": "duration_max",
                        "desc": "Maximum number of rounds allocated for the test, i.e. blocking of funds. This is to take into account key generation time after the stress testing contract has been created."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "App ID of the created application."
                },
                "desc": "Creates a new contract for stress testing."
            },
            {
                "name": "start",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address",
                        "desc": "Account of user that requested the test."
                    },
                    {
                        "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                        "name": "key_reg_info",
                        "desc": "Key registration information to use."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Payment transaction for transfer of the requested stake and for covering the fee for reward registration."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Starts the stress test."
            },
            {
                "name": "end",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address",
                        "desc": "Account that requested the test to end."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)"
                },
                "desc": "Ends the stress test."
            },
            {
                "name": "record",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Records a produced block during the stress test."
            },
            {
                "name": "unused",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Records a produced block during the stress test."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}