{
    "hints": {
        "cert_board_deploy()uint64": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "cert_board_key_reg((uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key_reg_info": {
                    "name": "KeyRegTxnInfo",
                    "elements": [
                        [
                            "vote_first",
                            "uint64"
                        ],
                        [
                            "vote_last",
                            "uint64"
                        ],
                        [
                            "vote_key_dilution",
                            "uint64"
                        ],
                        [
                            "vote_pk",
                            "byte[32]"
                        ],
                        [
                            "selection_pk",
                            "byte[32]"
                        ],
                        [
                            "state_proof_pk",
                            "byte[64]"
                        ],
                        [
                            "sender",
                            "address"
                        ]
                    ]
                }
            }
        },
        "cert_board_set(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cert_board_optin_asa(asset,account,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cert_board_withdraw(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cert_create(address,byte[1024],pay,txn)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cert_get(address,address)byte[1024]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stress_create(uint64,uint64,uint64,pay,txn)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stress_end(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stress_get(address,uint64)(uint64,uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "StressTestInfo",
                    "elements": [
                        [
                            "avr_online_stake",
                            "uint64"
                        ],
                        [
                            "cnt_produced_block",
                            "uint64"
                        ],
                        [
                            "round_start",
                            "uint64"
                        ],
                        [
                            "round_end",
                            "uint64"
                        ],
                        [
                            "stake",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "stress_record(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stress_start(uint64,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "key_reg_info": {
                    "name": "KeyRegTxnInfo",
                    "elements": [
                        [
                            "vote_first",
                            "uint64"
                        ],
                        [
                            "vote_last",
                            "uint64"
                        ],
                        [
                            "vote_key_dilution",
                            "uint64"
                        ],
                        [
                            "vote_pk",
                            "byte[32]"
                        ],
                        [
                            "selection_pk",
                            "byte[32]"
                        ],
                        [
                            "state_proof_pk",
                            "byte[64]"
                        ],
                        [
                            "sender",
                            "address"
                        ]
                    ]
                }
            }
        },
        "stress_unused(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuY2VydF9ib2FyZC5jb250cmFjdC5DZXJ0Qm9hcmQuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 9
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "blocked_algo": {
                    "type": "uint64",
                    "key": "blocked_algo"
                },
                "certificate_fee": {
                    "type": "uint64",
                    "key": "certificate_fee"
                },
                "expected_consensus_rate": {
                    "type": "uint64",
                    "key": "expected_consensus_rate"
                },
                "max_test_blocking": {
                    "type": "uint64",
                    "key": "max_test_blocking"
                },
                "max_test_duration": {
                    "type": "uint64",
                    "key": "max_test_duration"
                },
                "payment_asset": {
                    "type": "uint64",
                    "key": "payment_asset"
                },
                "pla_manager": {
                    "type": "bytes",
                    "key": "pla_manager"
                },
                "stake_max": {
                    "type": "uint64",
                    "key": "stake_max"
                },
                "stake_min": {
                    "type": "uint64",
                    "key": "stake_min"
                },
                "state": {
                    "type": "bytes",
                    "key": "state"
                },
                "stress_test_fee_round": {
                    "type": "uint64",
                    "key": "stress_test_fee_round"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "CertBoard",
        "desc": "\n    Certification Board servers as decentralized registrar for certificates to build trust in\n    the node running capabilities of an entity.\n    It supports issuing of attestations according to applicable node running standards by any entity.\n    Moreover, it supports generation of on-chain produced proofs of an entity's node running\n    capabilities through self-initiated stress tests, which get recorded as another certificate type.\n\n    Global state\n    ------------\n\n    pla_manager : Account\n        Platform manager account.\n\n    expected_consensus_rate : UInt64\n        Expected consensus reward rate.\n        Expressed as percentage per year.\n\n    certificate_fee : UInt64\n        Fee charged by the platform for issuing of a certificate by anyone.\n        Note: MBR increase is paid separately.\n    stress_test_fee_round : UInt64\n        Amount charged per round of the stress test.\n    payment_asset : UInt64\n        Payment method for the stress test and certificate fee.\n\n    max_test_duration : UInt64\n        Maximum allowed duration for a stress test.\n    max_test_blocking : UInt64\n        Maximum amount of rounds allowed to reserve for a stress test.\n\n    stake_min : UInt64\n        Minimum stake allowed to be used for a stress test.\n    stake_max : UInt64\n        Maximum stake allowed to be used for a stress test.\n\n    blocked_algo: UInt64\n        Amount of ALGO currently blocked and awaiting to be used in started stress test(s) requests.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            DEPLOYED - CertBoard has been created.\n            LIVE - CertBoard is live.\n\n    Methods\n    -------\n    cert_board_deploy(\n    ) -> arc4.UInt64:\n        Creates a new CertBoard.\n\n    cert_board_key_reg(\n        key_reg_info: KeyRegTxnInfo,\n        txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Issues a key (de)registration transaction by the platform.\n\n    cert_board_set(\n        pla_manager: arc4.Address,\n        expected_consensus_rate: UInt64,\n        certificate_fee: UInt64,\n        stress_test_fee_round: UInt64,\n        payment_asset: UInt64,\n        max_test_duration: UInt64,\n        max_test_blocking: UInt64,\n        stake_min: UInt64,\n        stake_max: UInt64,\n    ) -> None:\n        Sets platform parameters (anew).\n\n    cert_board_optin_asa(\n        asa: Asset,\n        sender: Account,\n        txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Opts the platform address in to an ASA.\n\n    cert_board_withdraw(\n        amount: UInt64,\n        asset_id: UInt64,\n    ) -> None:\n        Platform owner withdraws amount of asset from the platform.\n\n    cert_create(\n        recipient: arc4.Address,\n        info: CertInfo,\n        mbr_txn: gtxn.PaymentTransaction,\n        txn: gtxn.Transaction,\n    ) -> None:\n        An issuer creates a certificate stored on the platform.\n\n    cert_get(\n        recipient: arc4.Address,\n        issuer: arc4.Address,\n    ) -> CertInfo:\n        Returns the certificate issued by issuer to the recipient.\n\n    stress_create(\n        stake: UInt64,\n        duration: UInt64,\n        round_end_max: UInt64,\n        algo_txn: gtxn.PaymentTransaction,\n        txn: gtxn.Transaction,\n    ) -> arc4.UInt64:\n        Creates a stress test.\n\n    stress_end(\n        user_address: arc4.Address,\n        stress_test_id: UInt64,\n    ) -> None:\n        Ends a stress test.\n\n    stress_get(\n        recipient: arc4.Address,\n        stress_test_id: UInt64,\n    ) -> StressTestInfo:\n        Gets information about a successfully finished stress test.\n\n    stress_record(\n        user_address: arc4.Address,\n        stress_test_id: UInt64,\n    ) -> None:\n        Records a produced block of during the stress test.\n\n    stress_start(\n        stress_test_id: UInt64,\n        key_reg_info: KeyRegTxnInfo,\n    ) -> None:\n        Starts a created test.\n\n    stress_unused(\n        user_address: arc4.Address,\n        stress_test_id: UInt64,\n    ) -> None:\n        Ends a not used stress test.\n\n    ",
        "methods": [
            {
                "name": "cert_board_deploy",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "App ID of the created application."
                },
                "desc": "Creates a new CertBoard."
            },
            {
                "name": "cert_board_key_reg",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                        "name": "key_reg_info",
                        "desc": "Key registration information to send."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Payment transaction to cover costs for the key (de)registration fee."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Issues a key (de)registration transaction by the platform."
            },
            {
                "name": "cert_board_set",
                "args": [
                    {
                        "type": "address",
                        "name": "pla_manager",
                        "desc": "Platform manager account."
                    },
                    {
                        "type": "uint64",
                        "name": "expected_consensus_rate",
                        "desc": "Expected consensus reward rate. Expressed as percentage per year."
                    },
                    {
                        "type": "uint64",
                        "name": "certificate_fee",
                        "desc": "Fee charged by the platform for issuing of a certificate by anyone. Note: MBR increase is paid separately."
                    },
                    {
                        "type": "uint64",
                        "name": "stress_test_fee_round",
                        "desc": "Amount charged per round of the stress test."
                    },
                    {
                        "type": "uint64",
                        "name": "payment_asset",
                        "desc": "Payment method for the stress test and certificate fee."
                    },
                    {
                        "type": "uint64",
                        "name": "max_test_duration",
                        "desc": "Maximum allowed duration for a stress test."
                    },
                    {
                        "type": "uint64",
                        "name": "max_test_blocking",
                        "desc": "Maximum amount of rounds allowed to reserve for a stress test."
                    },
                    {
                        "type": "uint64",
                        "name": "stake_min",
                        "desc": "Minimum stake allowed to be used for a stress test."
                    },
                    {
                        "type": "uint64",
                        "name": "stake_max",
                        "desc": "Maximum stake allowed to be used for a stress test."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Sets platform parameters (anew)."
            },
            {
                "name": "cert_board_optin_asa",
                "args": [
                    {
                        "type": "asset",
                        "name": "asa",
                        "desc": "Asset to opt into."
                    },
                    {
                        "type": "account",
                        "name": "sender",
                        "desc": "Account to opt into the asa."
                    },
                    {
                        "type": "pay",
                        "name": "txn",
                        "desc": "Payment transaction to cover MBR increase."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opts the platform address in to an ASA."
            },
            {
                "name": "cert_board_withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "Amount to withdraw from the platform."
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id",
                        "desc": "ID of the asset to withdraw, i.e. ASA ID or 0 for ALGO."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Platform owner withdraws amount of asset from the platform."
            },
            {
                "name": "cert_create",
                "args": [
                    {
                        "type": "address",
                        "name": "recipient",
                        "desc": "Recipient of the certificate."
                    },
                    {
                        "type": "byte[1024]",
                        "name": "info",
                        "desc": "Information to be recorded in the certificate."
                    },
                    {
                        "type": "pay",
                        "name": "mbr_txn",
                        "desc": "Payment transaction for the payment of the increase of platform MBR due to creation of the certificate."
                    },
                    {
                        "type": "txn",
                        "name": "txn",
                        "desc": "Transaction for the payment of the certificate issuance fee."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "An issuer creates a certificate stored on the platform."
            },
            {
                "name": "cert_get",
                "args": [
                    {
                        "type": "address",
                        "name": "recipient",
                        "desc": "Recipient of the certificate."
                    },
                    {
                        "type": "address",
                        "name": "issuer",
                        "desc": "Issuer of the certificate."
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[1024]"
                },
                "desc": "Returns the certificate issued by issuer to the recipient."
            },
            {
                "name": "stress_create",
                "args": [
                    {
                        "type": "uint64",
                        "name": "stake",
                        "desc": "Amount of stake used in the stress test. The value is expressed in microALGO."
                    },
                    {
                        "type": "uint64",
                        "name": "duration",
                        "desc": "Number of rounds for the stress test. The actual duration of the block recording is 320 rounds shorter due to consensus trailing."
                    },
                    {
                        "type": "uint64",
                        "name": "duration_max",
                        "desc": "Maximum number of rounds allocated for the test, i.e. blocking of funds. This is to take into account key generation time after the stress testing contract has been created."
                    },
                    {
                        "type": "pay",
                        "name": "algo_txn",
                        "desc": "Payment transaction for the payment of: 1) the increase of platform MBR due to creation of the stress test, 2) the fee for making the stress test contract opt-in to rewards with later key reg, and 3) the fee charged for the potential loss of platforms consensus rewards due to the stress test."
                    },
                    {
                        "type": "txn",
                        "name": "txn",
                        "desc": "Transaction for the payment of the stress test fee."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Creates a stress test."
            },
            {
                "name": "stress_end",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address",
                        "desc": "Address of the user that initiated the stress test."
                    },
                    {
                        "type": "uint64",
                        "name": "stress_test_id",
                        "desc": "App ID of the stress test to end."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Ends a stress test."
            },
            {
                "name": "stress_get",
                "args": [
                    {
                        "type": "address",
                        "name": "recipient",
                        "desc": "Recipient of the certificate."
                    },
                    {
                        "type": "uint64",
                        "name": "stress_test_id",
                        "desc": "App ID of the stress test to end."
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64)"
                },
                "desc": "Gets information about a successfully finished stress test."
            },
            {
                "name": "stress_record",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address",
                        "desc": "Address of the user that initiated the stress test."
                    },
                    {
                        "type": "uint64",
                        "name": "stress_test_id",
                        "desc": "App ID of the stress test to end."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Records a produced block of during the stress test."
            },
            {
                "name": "stress_start",
                "args": [
                    {
                        "type": "uint64",
                        "name": "stress_test_id",
                        "desc": "App ID of the stress test to end."
                    },
                    {
                        "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
                        "name": "key_reg_info"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_txn",
                        "desc": "Payment transaction for the payment of the increase of platform MBR due to creation of the box to record the stress test."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Starts a created test."
            },
            {
                "name": "stress_unused",
                "args": [
                    {
                        "type": "address",
                        "name": "user_address",
                        "desc": "Address of the user that initiated the stress test."
                    },
                    {
                        "type": "uint64",
                        "name": "stress_test_id",
                        "desc": "App ID of the stress test to end."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Ends a not used stress test."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}