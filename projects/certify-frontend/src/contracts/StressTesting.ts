/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "create(address,address,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "key_reg_info": {
          "name": "KeyRegTxnInfo",
          "elements": [
            [
              "vote_first",
              "uint64"
            ],
            [
              "vote_last",
              "uint64"
            ],
            [
              "vote_key_dilution",
              "uint64"
            ],
            [
              "vote_pk",
              "byte[32]"
            ],
            [
              "selection_pk",
              "byte[32]"
            ],
            [
              "state_proof_pk",
              "byte[64]"
            ],
            [
              "sender",
              "address"
            ]
          ]
        }
      }
    },
    "end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)": {
      "call_config": {
        "delete_application": "CALL"
      },
      "structs": {
        "output": {
          "name": "ReturnStressTestingEnd",
          "elements": [
            [
              "success",
              "bool"
            ],
            [
              "avr_online_stake",
              "uint64"
            ],
            [
              "cnt_produced_block",
              "uint64"
            ],
            [
              "round_start",
              "uint64"
            ],
            [
              "round_end",
              "uint64"
            ],
            [
              "round_ended",
              "uint64"
            ],
            [
              "stake",
              "uint64"
            ],
            [
              "user_address",
              "address"
            ]
          ]
        }
      }
    },
    "record()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unused()uint64": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc3RyZXNzX3Rlc3RpbmcuY29udHJhY3QuU3RyZXNzVGVzdGluZy5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgaW50IDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "cnt_produced_blocks": {
          "type": "uint64",
          "key": "cnt_produced_blocks"
        },
        "cnt_total_stake_sum": {
          "type": "uint64",
          "key": "cnt_total_stake_sum"
        },
        "duration": {
          "type": "uint64",
          "key": "duration"
        },
        "duration_max": {
          "type": "uint64",
          "key": "duration_max"
        },
        "last_block": {
          "type": "uint64",
          "key": "last_block"
        },
        "owner_address": {
          "type": "bytes",
          "key": "owner_address"
        },
        "round_created": {
          "type": "uint64",
          "key": "round_created"
        },
        "round_end": {
          "type": "uint64",
          "key": "round_end"
        },
        "round_end_max": {
          "type": "uint64",
          "key": "round_end_max"
        },
        "round_ended": {
          "type": "uint64",
          "key": "round_ended"
        },
        "round_start": {
          "type": "uint64",
          "key": "round_start"
        },
        "stake": {
          "type": "uint64",
          "key": "stake"
        },
        "state": {
          "type": "bytes",
          "key": "state"
        },
        "total_stake_sum": {
          "type": "uint64",
          "key": "total_stake_sum"
        },
        "user_address": {
          "type": "bytes",
          "key": "user_address"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "StressTesting",
    "desc": "\n    Escrow to be put online for the stress test by the user.\n    It allows counting of produced blocks.\n\n    Global state\n    ------------\n\n    user_address : arc4.Address\n        Account of user that requested the test.\n    owner_address : arc4.Address\n        Account of owner of the funds used in the stress test.\n\n    stake : UInt64\n        Amount of stake used in the stress test.\n        The value is expressed in microALGO.\n\n    duration : UInt64\n        Number of rounds for the stress test.\n        The actual duration of the block recording is 320 rounds shorter due to consensus trailing.\n    duration_max : UInt64\n        Maximum number of rounds allocated for the test, i.e. blocking of funds.\n        This is to take into account key generation time after the stress testing contract has been created.\n    round_created : UInt64\n        Round number when the request for the stress test is created.\n    round_start : UInt64\n        Round number when the actual participation in consensus starts.\n    round_end : UInt64\n        Round number when test should end.\n    round_ended : UInt64\n        Round number at which the contract ended.\n        Can be smaller than round_end in case of early test termination.\n    round_end_max : UInt64\n        Round number by which the stress test will be completed at the latest.\n\n    last_block : UInt64\n        Last block number that this contract account produced.\n    cnt_produced_blocks : UInt64\n        Counter of produced blocks.\n\n    total_stake_sum : UInt64\n        Sum for calculating the average of total online stake during the test.\n    cnt_total_stake_sum : UInt64\n        Counter for calculating the average of total online stake during the test.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            CREATED - contract has been created.\n            LIVE - contract is live.\n\n    Methods\n    -------\n    create(\n        user_address: arc4.Address,\n        owner_address: arc4.Address,\n        stake: UInt64,\n        duration: UInt64,\n        round_end_max: UInt64,\n    ) -> arc4.UInt64:\n        Creates a new contract for stress testing.\n\n    start(\n        user_address: arc4.Address,\n        key_reg_info: KeyRegTxnInfo,\n        txn: gtxn.PaymentTransaction,\n    ) -> None:\n        Starts the stress test.\n\n    end(\n        user_address: arc4.Address,\n    ) -> ReturnStressTestingEnd:\n        Ends the stress test.\n\n    record(\n    ) -> None:\n        Records a produced block during the stress test.\n\n    unused(\n    ) -> None:\n        Records a produced block during the stress test.\n\n\n    ",
    "methods": [
      {
        "name": "create",
        "args": [
          {
            "type": "address",
            "name": "user_address",
            "desc": "Account of user that requested the test."
          },
          {
            "type": "address",
            "name": "owner_address",
            "desc": "Account of owner of the funds used in the stress test."
          },
          {
            "type": "uint64",
            "name": "stake",
            "desc": "Amount of stake used in the stress test. The value is expressed in microALGO."
          },
          {
            "type": "uint64",
            "name": "duration",
            "desc": "Number of rounds for the stress test. The actual duration of the block recording is 320 rounds shorter due to consensus trailing."
          },
          {
            "type": "uint64",
            "name": "duration_max",
            "desc": "Maximum number of rounds allocated for the test, i.e. blocking of funds. This is to take into account key generation time after the stress testing contract has been created."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64",
          "desc": "App ID of the created application."
        },
        "desc": "Creates a new contract for stress testing."
      },
      {
        "name": "start",
        "args": [
          {
            "type": "address",
            "name": "user_address",
            "desc": "Account of user that requested the test."
          },
          {
            "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
            "name": "key_reg_info",
            "desc": "Key registration information to use."
          },
          {
            "type": "pay",
            "name": "txn",
            "desc": "Payment transaction for transfer of the requested stake and for covering the fee for reward registration."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Starts the stress test."
      },
      {
        "name": "end",
        "args": [
          {
            "type": "address",
            "name": "user_address",
            "desc": "Account that requested the test to end."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)"
        },
        "desc": "Ends the stress test."
      },
      {
        "name": "record",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Records a produced block during the stress test."
      },
      {
        "name": "unused",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Records a produced block during the stress test."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the StressTesting smart contract.
 */
export type StressTesting = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(address,address,uint64,uint64,uint64)uint64' | 'create', {
      argsObj: {
        /**
         * Account of user that requested the test.
         */
        userAddress: string
        /**
         * Account of owner of the funds used in the stress test.
         */
        ownerAddress: string
        /**
         * Amount of stake used in the stress test. The value is expressed in microALGO.
         */
        stake: bigint | number
        /**
         * Number of rounds for the stress test. The actual duration of the block recording is 320 rounds shorter due to consensus trailing.
         */
        duration: bigint | number
        /**
         * Maximum number of rounds allocated for the test, i.e. blocking of funds. This is to take into account key generation time after the stress testing contract has been created.
         */
        durationMax: bigint | number
      }
      argsTuple: [userAddress: string, ownerAddress: string, stake: bigint | number, duration: bigint | number, durationMax: bigint | number]
      /**
       * App ID of the created application.
       */
      returns: bigint
    }>
    & Record<'start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void' | 'start', {
      argsObj: {
        /**
         * Account of user that requested the test.
         */
        userAddress: string
        /**
         * Key registration information to use.
         */
        keyRegInfo: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array, Uint8Array, string]
        /**
         * Payment transaction for transfer of the requested stake and for covering the fee for reward registration.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [userAddress: string, keyRegInfo: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array, Uint8Array, string], txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)' | 'end', {
      argsObj: {
        /**
         * Account that requested the test to end.
         */
        userAddress: string
      }
      argsTuple: [userAddress: string]
      returns: ReturnStressTestingEnd
    }>
    & Record<'record()void' | 'record', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'unused()uint64' | 'unused', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      cntProducedBlocks?: IntegerState
      cntTotalStakeSum?: IntegerState
      duration?: IntegerState
      durationMax?: IntegerState
      lastBlock?: IntegerState
      ownerAddress?: BinaryState
      roundCreated?: IntegerState
      roundEnd?: IntegerState
      roundEndMax?: IntegerState
      roundEnded?: IntegerState
      roundStart?: IntegerState
      stake?: IntegerState
      state?: BinaryState
      totalStakeSum?: IntegerState
      userAddress?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type StressTestingSig = keyof StressTesting['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends StressTestingSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a KeyRegTxnInfo result as a struct
 */
export type KeyRegTxnInfo = {
  voteFirst: bigint
  voteLast: bigint
  voteKeyDilution: bigint
  votePk: Uint8Array
  selectionPk: Uint8Array
  stateProofPk: Uint8Array
  sender: string
}
/**
 * Converts the tuple representation of a KeyRegTxnInfo to the struct representation
 */
export function KeyRegTxnInfo([voteFirst, voteLast, voteKeyDilution, votePk, selectionPk, stateProofPk, sender]: [bigint, bigint, bigint, Uint8Array, Uint8Array, Uint8Array, string] ) {
  return {
    voteFirst,
    voteLast,
    voteKeyDilution,
    votePk,
    selectionPk,
    stateProofPk,
    sender,
  }
}
/**
 * Represents a ReturnStressTestingEnd result as a struct
 */
export type ReturnStressTestingEnd = {
  success: boolean
  avrOnlineStake: bigint
  cntProducedBlock: bigint
  roundStart: bigint
  roundEnd: bigint
  roundEnded: bigint
  stake: bigint
  userAddress: string
}
/**
 * Converts the tuple representation of a ReturnStressTestingEnd to the struct representation
 */
export function ReturnStressTestingEnd([success, avrOnlineStake, cntProducedBlock, roundStart, roundEnd, roundEnded, stake, userAddress]: [boolean, bigint, bigint, bigint, bigint, bigint, bigint, string] ) {
  return {
    success,
    avrOnlineStake,
    cntProducedBlock,
    roundStart,
    roundEnd,
    roundEnded,
    stake,
    userAddress,
  }
}
/**
 * Maps a method signature from the StressTesting smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends StressTestingSig> = StressTesting['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StressTesting smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StressTestingSig> = StressTesting['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type StressTestingCreateCalls = (typeof StressTestingCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type StressTestingCreateCallParams =
  | (TypedCallParams<'create(address,address,uint64,uint64,uint64)uint64'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type StressTestingDeleteCalls = (typeof StressTestingCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type StressTestingDeleteCallParams =
  | TypedCallParams<'end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)'>
  | TypedCallParams<'unused()uint64'>
/**
 * Defines arguments required for the deploy method.
 */
export type StressTestingDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: StressTestingCreateCalls) => StressTestingCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: StressTestingDeleteCalls) => StressTestingDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class StressTestingCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the StressTesting smart contract using the create(address,address,uint64,uint64,uint64)uint64 ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      create(args: MethodArgs<'create(address,address,uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'create(address,address,uint64,uint64,uint64)uint64' as const,
          methodArgs: Array.isArray(args) ? args : [args.userAddress, args.ownerAddress, args.stake, args.duration, args.durationMax],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the StressTesting smart contract using the end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address) ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      end(args: MethodArgs<'end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)' as const,
          methodArgs: Array.isArray(args) ? args : [args.userAddress],
          ...params,
        }
      },
      /**
       * Constructs a delete call for the StressTesting smart contract using the unused()uint64 ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      unused(args: MethodArgs<'unused()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'unused()uint64' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void ABI method
   *
   * Starts the stress test.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static start(args: MethodArgs<'start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.userAddress, args.keyRegInfo, args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the record()void ABI method
   *
   * Records a produced block during the stress test.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static record(args: MethodArgs<'record()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'record()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the StressTesting smart contract
 */
export class StressTestingClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `StressTestingClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof StressTesting['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the StressTesting smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: StressTestingDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(StressTestingCallFactory.create)
    const deleteArgs = params.deleteCall?.(StressTestingCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the StressTesting smart contract using the create(address,address,uint64,uint64,uint64)uint64 ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result: App ID of the created application.
       */
      async create(args: MethodArgs<'create(address,address,uint64,uint64,uint64)uint64'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'create(address,address,uint64,uint64,uint64)uint64'>, AppCreateCallTransactionResult>(await $this.appClient.create(StressTestingCallFactory.create.create(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the StressTesting smart contract using the end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address) ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async end(args: MethodArgs<'end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)'>>(await $this.appClient.delete(StressTestingCallFactory.delete.end(args, params)))
      },
      /**
       * Deletes an existing instance of the StressTesting smart contract using the unused()uint64 ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async unused(args: MethodArgs<'unused()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'unused()uint64'>>(await $this.appClient.delete(StressTestingCallFactory.delete.unused(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the StressTesting smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void ABI method.
   *
   * Starts the stress test.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public start(args: MethodArgs<'start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StressTestingCallFactory.start(args, params))
  }

  /**
   * Calls the record()void ABI method.
   *
   * Records a produced block during the stress test.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public record(args: MethodArgs<'record()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(StressTestingCallFactory.record(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<StressTesting['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get cntProducedBlocks() {
        return StressTestingClient.getIntegerState(state, 'cnt_produced_blocks')
      },
      get cntTotalStakeSum() {
        return StressTestingClient.getIntegerState(state, 'cnt_total_stake_sum')
      },
      get duration() {
        return StressTestingClient.getIntegerState(state, 'duration')
      },
      get durationMax() {
        return StressTestingClient.getIntegerState(state, 'duration_max')
      },
      get lastBlock() {
        return StressTestingClient.getIntegerState(state, 'last_block')
      },
      get ownerAddress() {
        return StressTestingClient.getBinaryState(state, 'owner_address')
      },
      get roundCreated() {
        return StressTestingClient.getIntegerState(state, 'round_created')
      },
      get roundEnd() {
        return StressTestingClient.getIntegerState(state, 'round_end')
      },
      get roundEndMax() {
        return StressTestingClient.getIntegerState(state, 'round_end_max')
      },
      get roundEnded() {
        return StressTestingClient.getIntegerState(state, 'round_ended')
      },
      get roundStart() {
        return StressTestingClient.getIntegerState(state, 'round_start')
      },
      get stake() {
        return StressTestingClient.getIntegerState(state, 'stake')
      },
      get state() {
        return StressTestingClient.getBinaryState(state, 'state')
      },
      get totalStakeSum() {
        return StressTestingClient.getIntegerState(state, 'total_stake_sum')
      },
      get userAddress() {
        return StressTestingClient.getBinaryState(state, 'user_address')
      },
    }
  }

  public compose(): StressTestingComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      start(args: MethodArgs<'start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.start(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      record(args: MethodArgs<'record()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.record(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          end(args: MethodArgs<'end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.end(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(ReturnStressTestingEnd)
            return $this
          },
          unused(args: MethodArgs<'unused()uint64'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.unused(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as StressTestingComposer
  }
}
export type StressTestingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void ABI method.
   *
   * Starts the stress test.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  start(args: MethodArgs<'start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): StressTestingComposer<[...TReturns, MethodReturn<'start(address,(uint64,uint64,uint64,byte[32],byte[32],byte[64],address),pay)void'>]>

  /**
   * Calls the record()void ABI method.
   *
   * Records a produced block during the stress test.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  record(args: MethodArgs<'record()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): StressTestingComposer<[...TReturns, MethodReturn<'record()void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the StressTesting smart contract using the end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address) ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    end(args: MethodArgs<'end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)'>, params?: AppClientComposeCallCoreParams): StressTestingComposer<[...TReturns, MethodReturn<'end(address)(bool,uint64,uint64,uint64,uint64,uint64,uint64,address)'>]>
    /**
     * Deletes an existing instance of the StressTesting smart contract using the unused()uint64 ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    unused(args: MethodArgs<'unused()uint64'>, params?: AppClientComposeCallCoreParams): StressTestingComposer<[...TReturns, MethodReturn<'unused()uint64'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the StressTesting smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): StressTestingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): StressTestingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<StressTestingComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<StressTestingComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type StressTestingComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type StressTestingComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
